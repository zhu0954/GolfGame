//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""89f970f7-d722-4d7a-85a3-ed07e344b004"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""d0bb8a22-7706-4f38-bac6-c8d86cbc35bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""e11cc328-ca55-41ca-97c3-0bea688281f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""cc0c6c0e-63fe-4c56-b44a-c4b7e3636c4e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""26575d66-e8e6-4b37-b6bf-2f130bdba836"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""44b6616e-84ee-4121-847b-167ee106691c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d5339ae3-3d1f-4373-ae0d-de3a8a45900e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""364ba75a-99fd-4e7b-802d-b63be4cb6d46"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dd3c6c98-a385-4619-b6c5-aad597c05758"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Animation"",
            ""id"": ""ca615efa-8f4c-4119-81e7-3733c211d518"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""448e10e3-724f-49d3-b49a-0bb5aeeaa1b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""587f2898-a293-442f-9679-0522266399a1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grab"",
            ""id"": ""ef7a6ac6-eea9-4ed8-b1e2-045ad05d08af"",
            ""actions"": [
                {
                    ""name"": ""Grabbing"",
                    ""type"": ""Button"",
                    ""id"": ""74ad916c-204b-4896-ac86-68b49823354d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""f1279388-181a-4233-9604-b187621694c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""3c8b85c1-1dd9-4bee-89cf-9410d5d95810"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""09bfe974-3955-493d-b8cb-bcae61f913a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""a7ae1e50-0d51-48c5-9957-61fbc6dd82d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e49d437-25c4-4bb6-8e02-bfd744603150"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grabbing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e96ed0aa-c7aa-46de-b24a-13f409b9abe1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""114a918f-855d-4009-81a8-ff2ead654853"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1df802e-9a91-4244-99e7-aae7692837d1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f149a52b-b893-4d8e-a3cb-cb1eea996fd9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Walk = m_Movement.FindAction("Walk", throwIfNotFound: true);
        m_Movement_Run = m_Movement.FindAction("Run", throwIfNotFound: true);
        // Animation
        m_Animation = asset.FindActionMap("Animation", throwIfNotFound: true);
        m_Animation_Newaction = m_Animation.FindAction("New action", throwIfNotFound: true);
        // Grab
        m_Grab = asset.FindActionMap("Grab", throwIfNotFound: true);
        m_Grab_Grabbing = m_Grab.FindAction("Grabbing", throwIfNotFound: true);
        m_Grab_Up = m_Grab.FindAction("Up", throwIfNotFound: true);
        m_Grab_Down = m_Grab.FindAction("Down", throwIfNotFound: true);
        m_Grab_Left = m_Grab.FindAction("Left", throwIfNotFound: true);
        m_Grab_Right = m_Grab.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Walk;
    private readonly InputAction m_Movement_Run;
    public struct MovementActions
    {
        private @PlayerActions m_Wrapper;
        public MovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Movement_Walk;
        public InputAction @Run => m_Wrapper.m_Movement_Run;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalk;
                @Run.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Animation
    private readonly InputActionMap m_Animation;
    private IAnimationActions m_AnimationActionsCallbackInterface;
    private readonly InputAction m_Animation_Newaction;
    public struct AnimationActions
    {
        private @PlayerActions m_Wrapper;
        public AnimationActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Animation_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Animation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AnimationActions set) { return set.Get(); }
        public void SetCallbacks(IAnimationActions instance)
        {
            if (m_Wrapper.m_AnimationActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_AnimationActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_AnimationActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_AnimationActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_AnimationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public AnimationActions @Animation => new AnimationActions(this);

    // Grab
    private readonly InputActionMap m_Grab;
    private IGrabActions m_GrabActionsCallbackInterface;
    private readonly InputAction m_Grab_Grabbing;
    private readonly InputAction m_Grab_Up;
    private readonly InputAction m_Grab_Down;
    private readonly InputAction m_Grab_Left;
    private readonly InputAction m_Grab_Right;
    public struct GrabActions
    {
        private @PlayerActions m_Wrapper;
        public GrabActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grabbing => m_Wrapper.m_Grab_Grabbing;
        public InputAction @Up => m_Wrapper.m_Grab_Up;
        public InputAction @Down => m_Wrapper.m_Grab_Down;
        public InputAction @Left => m_Wrapper.m_Grab_Left;
        public InputAction @Right => m_Wrapper.m_Grab_Right;
        public InputActionMap Get() { return m_Wrapper.m_Grab; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrabActions set) { return set.Get(); }
        public void SetCallbacks(IGrabActions instance)
        {
            if (m_Wrapper.m_GrabActionsCallbackInterface != null)
            {
                @Grabbing.started -= m_Wrapper.m_GrabActionsCallbackInterface.OnGrabbing;
                @Grabbing.performed -= m_Wrapper.m_GrabActionsCallbackInterface.OnGrabbing;
                @Grabbing.canceled -= m_Wrapper.m_GrabActionsCallbackInterface.OnGrabbing;
                @Up.started -= m_Wrapper.m_GrabActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_GrabActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_GrabActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_GrabActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_GrabActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_GrabActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_GrabActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_GrabActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_GrabActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_GrabActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_GrabActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_GrabActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_GrabActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Grabbing.started += instance.OnGrabbing;
                @Grabbing.performed += instance.OnGrabbing;
                @Grabbing.canceled += instance.OnGrabbing;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public GrabActions @Grab => new GrabActions(this);
    public interface IMovementActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface IAnimationActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IGrabActions
    {
        void OnGrabbing(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
